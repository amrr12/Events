// <auto-generated />
using System;
using LibraryAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Events.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Events.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("PerformerId")
                        .HasColumnType("int");

                    b.Property<int>("ShowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerformerId");

                    b.HasIndex("ShowId");

                    b.ToTable("Application", (string)null);
                });

            modelBuilder.Entity("Events.Models.Show", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("pk_showId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Show", (string)null);
                });

            modelBuilder.Entity("Events.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Events.Models.Owner", b =>
                {
                    b.HasBaseType("Events.Models.User");

                    b.ToTable("Owner", (string)null);
                });

            modelBuilder.Entity("Events.Models.Performer", b =>
                {
                    b.HasBaseType("Events.Models.User");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Perform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNmber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Performer", (string)null);
                });

            modelBuilder.Entity("Events.Models.Application", b =>
                {
                    b.HasOne("Events.Models.Performer", "Performer")
                        .WithMany("Applications")
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_performerid");

                    b.HasOne("Events.Models.Show", "Show")
                        .WithMany("Applications")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_showid");

                    b.Navigation("Performer");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Events.Models.Show", b =>
                {
                    b.HasOne("Events.Models.Owner", "Owner")
                        .WithMany("Shows")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("fk_ownerid");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Events.Models.Owner", b =>
                {
                    b.HasOne("Events.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Events.Models.Owner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Models.Performer", b =>
                {
                    b.HasOne("Events.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Events.Models.Performer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Models.Show", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Events.Models.Owner", b =>
                {
                    b.Navigation("Shows");
                });

            modelBuilder.Entity("Events.Models.Performer", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
